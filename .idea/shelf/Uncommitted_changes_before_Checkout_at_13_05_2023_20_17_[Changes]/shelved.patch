Index: gulpfile.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* eslint-disable no-unused-vars */\r\nconst gulp = require(\"gulp\");\r\n\r\nconst sass = require(\"gulp-sass\")(require(\"sass\"));\r\nconst del = require(\"del\");\r\nconst rename = require(\"gulp-rename\");\r\nconst cleanCSS = require(\"gulp-clean-css\");\r\n\r\nconst sourcemaps = require(\"gulp-sourcemaps\");\r\nconst autoprefixer = require(\"gulp-autoprefixer\");\r\n\r\nconst imagemin = require(\"gulp-imagemin\");\r\nconst htmlmin = require(\"gulp-htmlmin\");\r\nconst size = require(\"gulp-size\");\r\nconst gulpts = require(\"gulp\");\r\n// eslint-disable-next-line import/no-extraneous-dependencies\r\nconst webpack = require(\"webpack-stream\");\r\nconst browsersync = require(\"browser-sync\").create();\r\n\r\nconst paths = {\r\n  html: {\r\n    src: \"src/*.html\",\r\n    dest: \"dist\",\r\n  },\r\n  styles: {\r\n    src: [\"src/scss/**/*.+(scss|sass)\"],\r\n    dest: \"dist/css/\",\r\n  },\r\n  scripts: {\r\n    src: \"src/js/**/*.js\",\r\n    dest: \"dist/js/\",\r\n  },\r\n  images: {\r\n    src: \"src/assets/img/**/*\",\r\n    dest: \"dist/img\",\r\n  },\r\n  icons: {\r\n    src: \"src/assets/icons/**/*\",\r\n    dest: \"dist/icons\",\r\n  },\r\n  fonts: {\r\n    src: \"src/assets/fonts/**/*\",\r\n    dest: \"dist/fonts\",\r\n  },\r\n};\r\nconst dist = \"./dist/\";\r\nfunction clean() {\r\n  return del([\"dist\", \"dist/img\"]);\r\n} // Задача для очистки папки dist\r\n\r\nfunction html() {\r\n  return gulp\r\n    .src(paths.html.src)\r\n    .pipe(htmlmin({ collapseWhitespace: true }))\r\n    .pipe(\r\n      size({\r\n        showFiles: true,\r\n      }) // Отображение размера сжатого файла\r\n    )\r\n    .pipe(gulp.dest(paths.html.dest))\r\n    .pipe(browsersync.stream());\r\n} // Задача на минимизацию html-кода\r\n\r\nfunction styles() {\r\n  return gulp\r\n    .src(paths.styles.src)\r\n    .pipe(sourcemaps.init())\r\n    .pipe(sass().on(\"error\", sass.logError))\r\n    .pipe(\r\n      autoprefixer({\r\n        cascade: false,\r\n      })\r\n    )\r\n    .pipe(\r\n      cleanCSS({\r\n        level: 2,\r\n      })\r\n    )\r\n    .pipe(\r\n      rename({\r\n        basename: \"main\",\r\n        suffix: \".min\",\r\n      })\r\n    )\r\n    .pipe(sourcemaps.write(\".\"))\r\n    .pipe(\r\n      size({\r\n        showFiles: true,\r\n      }) // Отображение размера сжатого файла\r\n    )\r\n    .pipe(gulp.dest(paths.styles.dest))\r\n    .pipe(browsersync.stream());\r\n} // Задача для обработки styles.less(Хз нах оно мне)\r\n\r\n// function scripts() {\r\n//    return gulp\r\n//       .src(paths.scripts.src)\r\n//       .pipe(newer(paths.scripts.dest))\r\n//       .pipe(sourcemaps.init())\r\n//       .pipe(\r\n//          babel({\r\n//             presets: [\"@babel/env\"],\r\n//          }) // Настройка под другие стандарти\r\n//       )\r\n//       .pipe(uglify())\r\n//       .pipe(concat(\"main.min.js\"))\r\n//       .pipe(sourcemaps.write(\".\"))\r\n//       .pipe(\r\n//          size({\r\n//             showFiles: true,\r\n//          }) // Отображение размера сжатого файла\r\n//       )\r\n\r\n//       .pipe(gulp.dest(paths.scripts.dest))\r\n//       .pipe(browsersync.stream());\r\n// } // Задача для обработки скриптов\r\n\r\nfunction icons() {\r\n  return gulp.src(paths.icons.src).pipe(gulp.dest(paths.icons.dest));\r\n} // Задача на перенос иконок в dist\r\n\r\nfunction fonts() {\r\n  return gulp.src(paths.fonts.src).pipe(gulp.dest(paths.fonts.dest));\r\n}\r\ngulp.task(\"build-prod-js\", () =>\r\n  gulp\r\n    .src(\"./src/js/main.js\")\r\n    .pipe(\r\n      webpack({\r\n        mode: \"production\",\r\n        output: {\r\n          filename: \"script.js\",\r\n        },\r\n        module: {\r\n          rules: [\r\n            {\r\n              test: /\\.m?js$/,\r\n              exclude: /(node_modules|bower_components)/,\r\n              use: {\r\n                loader: \"babel-loader\",\r\n                options: {\r\n                  presets: [\r\n                    [\r\n                      \"@babel/preset-env\",\r\n                      {\r\n                        corejs: 3,\r\n                        useBuiltIns: \"usage\",\r\n                      },\r\n                    ],\r\n                  ],\r\n                },\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      })\r\n    )\r\n    .pipe(gulp.dest(dist))\r\n);\r\n\r\ngulp.task(\r\n  \"build-js\",\r\n  () =>\r\n    gulp\r\n      .src(\"./src/js/main.js\")\r\n      .pipe(\r\n        webpack({\r\n          mode: \"development\",\r\n          output: {\r\n            filename: \"script.js\",\r\n          },\r\n          watch: false,\r\n          devtool: \"source-map\",\r\n          module: {\r\n            rules: [\r\n              {\r\n                test: /\\.m?js$/,\r\n                exclude: /(node_modules|bower_components)/,\r\n                use: {\r\n                  loader: \"babel-loader\",\r\n                  options: {\r\n                    presets: [\r\n                      [\r\n                        \"@babel/preset-env\",\r\n                        {\r\n                          debug: true,\r\n                          corejs: 3,\r\n                          useBuiltIns: \"usage\",\r\n                        },\r\n                      ],\r\n                    ],\r\n                  },\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        })\r\n      )\r\n      .pipe(gulp.dest(dist))\r\n  // .on(\"end\", browsersync.reload)\r\n);\r\nfunction img() {\r\n  return gulp\r\n    .src(paths.images.src)\r\n    .pipe(\r\n      imagemin(\r\n        [\r\n          imagemin.mozjpeg({ quality: 75, progressive: true }),\r\n          imagemin.optipng({ optimizationLevel: 3 }),\r\n        ],\r\n        {\r\n          progressive: true,\r\n        }\r\n      ) // для jpeg i png отдельние настройки\r\n    )\r\n    .pipe(gulp.dest(paths.images.dest));\r\n} // Задача на сжатие фото\r\n\r\nfunction watch() {\r\n  browsersync.init({\r\n    server: {\r\n      baseDir: \"./dist/\",\r\n    },\r\n  }); // Запуск сервера\r\n  gulp.watch(paths.html.dest).on(\"change\", browsersync.reload);\r\n  gulp.watch(paths.html.src, html);\r\n  gulp.watch(paths.styles.src, styles);\r\n  gulp.watch(\"./src/js/**/*.js\", gulp.parallel(\"build-js\"));\r\n  gulp.watch(paths.images.src, img);\r\n} // Задача для слежки файлов на изменение\r\n\r\n// Запускаються все задачи\r\nconst build = gulp.series(\r\n  // clean,\r\n  html,\r\n  gulp.parallel(styles, \"build-js\", img, icons, fonts),\r\n  watch\r\n);\r\n\r\n// Можно так-же запустить по отдельности каждий таск\r\nexports.icons = icons;\r\nexports.fonts = fonts;\r\nexports.img = img;\r\nexports.html = html;\r\nexports.clean = clean;\r\nexports.styles = styles;\r\nexports.scripts = \"build-js\";\r\nexports.watch = watch;\r\nexports.build = build;\r\nexports.default = build;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gulpfile.js b/gulpfile.js
--- a/gulpfile.js	(revision 8bcc2861417039cc988e80731bde02380164b066)
+++ b/gulpfile.js	(date 1683997949849)
@@ -233,7 +233,7 @@
 const build = gulp.series(
   // clean,
   html,
-  gulp.parallel(styles, "build-js", img, icons, fonts),
+  gulp.parallel(styles, "build-prod-js", img, icons, fonts),
   watch
 );
 
Index: src/js/modules/date/Date.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>class DateHome {\r\n   #dateSelector;\r\n\r\n   #date;\r\n\r\n   constructor(DateSelector) {\r\n      this.#dateSelector = document.querySelector(DateSelector);\r\n      this.#date = new Date();\r\n   }\r\n\r\n   // eslint-disable-next-line class-methods-use-this\r\n   #dayToString(dayNum) {\r\n      switch (dayNum) {\r\n         case 1:\r\n            return \"Monday\";\r\n\r\n         case 2:\r\n            return \"Tuesday\";\r\n         case 3:\r\n            return \"Wednesday\";\r\n         case 4:\r\n            return \"Thursday\";\r\n         case 5:\r\n            return \"Friday\";\r\n         case 6:\r\n            return \"Saturday\";\r\n         case 7:\r\n            return \"Sunday\";\r\n         default:\r\n            return \"Not Found\";\r\n      }\r\n   }\r\n\r\n   #monthToString(monthNum) {\r\n      switch (monthNum) {\r\n         case 1:\r\n            return \"January\";\r\n         case 2:\r\n            return \"February\";\r\n         case 3:\r\n            return \"March\";\r\n         case 4:\r\n            return \"April\";\r\n         case 5:\r\n            return \"May\";\r\n         case 6:\r\n            return \"June\";\r\n         case 7:\r\n            return \"July\";\r\n         case 8:\r\n            return \"August\";\r\n         case 9:\r\n            return \"September\";\r\n         case 10:\r\n            return \"October\";\r\n         case 11:\r\n            return \"November\";\r\n         case 12:\r\n            return \"December\";\r\n         default:\r\n            return \"Not Found\";\r\n      }\r\n   }\r\n\r\n   render() {\r\n      const day = this.#dayToString(this.#date.getDay());\r\n      const month = this.#monthToString(this.#date.getMonth() + 1);\r\n      const date = this.#date.getDate();\r\n      try {\r\n         this.#dateSelector.textContent = `${day}, ${month} ${date}`;\r\n      } catch (error) {\r\n         /* empty */\r\n      }\r\n   }\r\n}\r\nexport default DateHome;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/js/modules/date/Date.js b/src/js/modules/date/Date.js
--- a/src/js/modules/date/Date.js	(revision 8bcc2861417039cc988e80731bde02380164b066)
+++ b/src/js/modules/date/Date.js	(date 1683374455056)
@@ -31,6 +31,7 @@
       }
    }
 
+   // eslint-disable-next-line class-methods-use-this
    #monthToString(monthNum) {
       switch (monthNum) {
          case 1:
